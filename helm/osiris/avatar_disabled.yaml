---
# Source: osiris/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-osiris
  labels:
    helm.sh/chart: osiris-0.1.0
    app.kubernetes.io/name: osiris
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: osiris/templates/llm-sidecar-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-osiris-llm-sidecar-config
  labels:
    helm.sh/chart: osiris-0.1.0
    app.kubernetes.io/name: osiris
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: llm-sidecar
data:
  SENTRY_DSN: ""
  SENTRY_ENV: "development"
  SENTRY_TRACES_SAMPLE_RATE: "0.2"
---
# Source: osiris/templates/orchestrator-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-osiris-orchestrator-config
  labels:
    helm.sh/chart: osiris-0.1.0
    app.kubernetes.io/name: osiris
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: orchestrator
data:
  SENTRY_DSN: ""
  SENTRY_ENV: "development"
  SENTRY_TRACES_SAMPLE_RATE: "0.2"
---
# Source: osiris/templates/llm-sidecar-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-osiris-llm-sidecar
  labels:
    helm.sh/chart: osiris-0.1.0
    app.kubernetes.io/name: osiris
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: llm-sidecar
spec:
  type: ClusterIP
  ports:
    - port: 8000
      targetPort: http-llm
      protocol: TCP
      name: http-llm
  selector:
    app.kubernetes.io/name: osiris
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: llm-sidecar
---
# Source: osiris/templates/orchestrator-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-osiris-orchestrator
  labels:
    helm.sh/chart: osiris-0.1.0
    app.kubernetes.io/name: osiris
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: orchestrator
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: osiris
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: orchestrator
---
# Source: osiris/templates/redis-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-osiris-redis
  labels:
    helm.sh/chart: osiris-0.1.0
    app.kubernetes.io/name: osiris
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: redis
spec:
  type: ClusterIP
  ports:
    - port: 6379
      targetPort: redis
      protocol: TCP
      name: redis
  selector:
    app.kubernetes.io/name: osiris
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: redis
---
# Source: osiris/templates/llm-sidecar-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-osiris-llm-sidecar
  labels:
    helm.sh/chart: osiris-0.1.0
    app.kubernetes.io/name: osiris
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: llm-sidecar
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: osiris
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: llm-sidecar
  template:
    metadata:
      labels:
        app.kubernetes.io/name: osiris
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: llm-sidecar
    spec:
      serviceAccountName: release-name-osiris
      securityContext:
        {}
      containers:
        - name: llm-sidecar
          securityContext:
            {}
          image: "your-repo/llm-sidecar:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http-llm
              containerPort: 8000
              protocol: TCP
          # livenessProbe:
          #   httpGet:
          #     path: /health # Adjust to your llm-sidecar's health check endpoint
          #     port: http-llm
          # readinessProbe:
          #   httpGet:
          #     path: /ready # Adjust to your llm-sidecar's readiness endpoint
          #     port: http-llm
          resources:
            {}
          # Example of mounting config from values.yaml if llmSidecar.config is used
          envFrom:
          - configMapRef:
              name: release-name-osiris-llm-sidecar-config
      # GPU Node Selector: Only apply if .Values.llmSidecar.nodeSelector is not empty
      # Tolerations for GPU nodes (e.g., if nodes are tainted)
---
# Source: osiris/templates/orchestrator-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-osiris-orchestrator
  labels:
    helm.sh/chart: osiris-0.1.0
    app.kubernetes.io/name: osiris
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: orchestrator
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: osiris
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: orchestrator
  template:
    metadata:
      labels:
        app.kubernetes.io/name: osiris
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: orchestrator
    spec:
      serviceAccountName: release-name-osiris
      securityContext:
        {}
      containers:
        - name: orchestrator
          securityContext:
            {}
          image: "your-repo/orchestrator:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          # livenessProbe:
          #   httpGet:
          #     path: /healthz # Adjust to your orchestrator's health check endpoint
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /readyz # Adjust to your orchestrator's readiness endpoint
          #     port: http
          resources:
            {}
          # Example of mounting config from values.yaml if orchestrator.config is used
          envFrom:
          - configMapRef:
              name: release-name-osiris-orchestrator-config
---
# Source: osiris/templates/redis-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-osiris-redis
  labels:
    helm.sh/chart: osiris-0.1.0
    app.kubernetes.io/name: osiris
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: redis
spec:
  replicas: 1 # Redis standalone, consider StatefulSet for HA/persistence
  selector:
    matchLabels:
      app.kubernetes.io/name: osiris
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: redis
  template:
    metadata:
      labels:
        app.kubernetes.io/name: osiris
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: redis
    spec:
      serviceAccountName: release-name-osiris
      securityContext:
        fsGroup: 1001 # Example, ensure this matches your Redis image's user/group if needed
        runAsUser: 1001 # Example
      containers:
        - name: redis
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001 # Example, redis official images run as redis (999) or similar
          image: "redis:alpine"
          imagePullPolicy: IfNotPresent
          ports:
            - name: redis
              containerPort: 6379
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: redis
            initialDelaySeconds: 5
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: redis
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            {}

# Default values for osiris chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# Service account settings - useful if your pods need specific permissions
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Orchestrator specific values
orchestrator:
  name: orchestrator
  replicaCount: 1  # Default replica count for orchestrator
  image:
    repository: your-repo/orchestrator  # Placeholder
    pullPolicy: IfNotPresent
    tag: "latest"
  service:
    type: ClusterIP
    port: 80
  resources: {}
  podSecurityContext: {}
  securityContext: {}
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
  pdb:
    enabled: false
    minAvailable: 1
  nodeSelector: {}
  tolerations: []
  affinity: {}
  config:
    SENTRY_DSN: ""
    SENTRY_ENV: "development"
    SENTRY_TRACES_SAMPLE_RATE: "0.2"
    OTEL_EXPORTER_OTLP_ENDPOINT: ""

# LLM-Sidecar specific values
llmSidecar:
  name: llm-sidecar
  replicaCount: 1
  image:
    repository: your-repo/llm-sidecar  # Placeholder
    pullPolicy: IfNotPresent
    tag: "latest"
  service:
    type: ClusterIP
    port: 8000
  prometheusScrape:
    enabled: false
    path: /metrics
    port: 8000
  nodeSelector: {}
  resources: {}
  podSecurityContext: {}
  securityContext: {}
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
  pdb:
    enabled: false
    minAvailable: 1
  tolerations: []
  affinity: {}
  config:
    SENTRY_DSN: ""
    SENTRY_ENV: "development"
    SENTRY_TRACES_SAMPLE_RATE: "0.2"
    OTEL_EXPORTER_OTLP_ENDPOINT: ""

# AZR Planner Configuration
azrPlanner:
  enabled: true
  replicaCount: 1
  image:
    repository: osiris/azr-planner
    pullPolicy: IfNotPresent
    tag: "latest"
  service:
    type: ClusterIP
    port: 8001

  # Tunable batch sizes per Helm values
  alphaThresholdHigh: 0.5
  alphaTasksPerUnit: 2
  betaTasksPerUnit: 1

  # resources: {}
  # nodeSelector: {}
  # tolerations: []
  # affinity: {}

# Redis specific values
redis:
  name: redis
  image:
    repository: redis
    pullPolicy: IfNotPresent
    tag: "alpine"
  service:
    type: ClusterIP
    port: 6379
  resources: {}
  persistence:
    enabled: false
  podSecurityContext:
    fsGroup: 1001
    runAsUser: 1001
  securityContext:
    runAsNonRoot: true
    runAsUser: 1001

# Placeholder for other global settings
global: {}

otel:
  enabled: false

otelCollectorSidecar:
  enabled: false
  endpoint: http://localhost:4318
  image:
    repository: otel/opentelemetry-collector-contrib
    pullPolicy: IfNotPresent
    tag: "0.92.0"
  config: |
    receivers:
      otlp:
        protocols:
          http:
    exporters:
      logging:
        loglevel: debug
        verbosity: detailed
    service:
      pipelines:
        traces:
          receivers: [otlp]
          exporters: [logging]

musetalk:
  useGpu: true

prometheus:
  rules:
    create: true

observability:
  grafana:
    enabled: false
    prometheus:
      url: http://prometheus-server

# Avatar specific values
avatar:
  enabled: false
  image:
    repository: your-repo/avatar-worker  # Placeholder
    pullPolicy: IfNotPresent
    tag: "latest"
  useTrt: false
  service:
    type: ClusterIP
    port: 8080
  nodeSelector: {}
  resources: {}
  replicaCount: 1
  config: {}

# LanceDB service values
lancedb:
  enabled: false
  service:
    type: ClusterIP
    port: 8100

# Network policy configuration
networkPolicy:
  enabled: false
  ingressControllerLabels: {}
  orchestrator:
    enabled: true
  llmSidecar:
    enabled: true
  redis:
    enabled: true
  lancedb:
    enabled: false

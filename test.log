============================= test session starts ==============================
platform linux -- Python 3.11.12, pytest-8.4.0, pluggy-1.6.0
rootdir: /workspace/82edge_osiris
configfile: pyproject.toml
plugins: mock-3.14.1, langsmith-0.3.45, hypothesis-6.135.1, asyncio-1.0.0, anyio-4.9.0, typeguard-4.4.3
asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=function, asyncio_default_test_loop_scope=function
collected 85 items

tests/dgm/test_prover.py ...                                             [  3%]
tests/dgm_kernel/test_meta_loop.py ..........                            [ 15%]
tests/dgm_kernel/test_mutation_property.py ..                            [ 17%]
tests/dgm_kernel/test_prover.py ....                                     [ 22%]
tests/dgm_kernel/test_sandbox.py ..                                      [ 24%]
tests/dgm_kernel/test_verify_patch.py ....                               [ 29%]
tests/hitl/test_hitl_pr.py .                                             [ 30%]
tests/test_adapter_hot_swap.py ...FF                                     [ 36%]
tests/test_db.py F...                                                    [ 41%]
tests/test_db_bootstrap.py .                                             [ 42%]
tests/test_event_bus.py ssssssss                                         [ 51%]
tests/test_feedback_mechanism.py FFFF                                    [ 56%]
tests/test_feedback_versioning.py ..FF                                   [ 61%]
tests/test_harvest.py .                                                  [ 62%]
tests/test_imports.py .                                                  [ 63%]
tests/test_llm_client.py FF                                              [ 65%]
tests/test_llm_sidecar_utils.py ......                                   [ 72%]
tests/test_metrics.py ss                                                 [ 75%]
tests/test_nightly_trainer.py .                                          [ 76%]
tests/test_orchestrator.py ..                                            [ 78%]
tests/test_orchestrator_e2e.py s                                         [ 80%]
tests/test_risk_gate.py .......                                          [ 88%]
tests/test_server.py FFFFFFFF                                            [ 97%]
tests/test_traces.py ss                                                  [100%]

=================================== FAILURES ===================================
__________ TestHealthEndpoint.test_health_endpoint_with_adapter_date ___________

self = <tests.test_adapter_hot_swap.TestHealthEndpoint testMethod=test_health_endpoint_with_adapter_date>

    def setUp(self):
        """Set up the test client before each test."""
>       self.client = TestClient(app)
                      ^^^^^^^^^^^^^^^

tests/test_adapter_hot_swap.py:183: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <starlette.testclient.TestClient object at 0x7fc450901490>
app = <fastapi.applications.FastAPI object at 0x7fc4738b6090>
base_url = 'http://testserver', raise_server_exceptions = True, root_path = ''
backend = 'asyncio', backend_options = None, cookies = None
headers = {'user-agent': 'testclient'}, follow_redirects = True

    def __init__(
        self,
        app: ASGIApp,
        base_url: str = "http://testserver",
        raise_server_exceptions: bool = True,
        root_path: str = "",
        backend: typing.Literal["asyncio", "trio"] = "asyncio",
        backend_options: dict[str, typing.Any] | None = None,
        cookies: httpx._types.CookieTypes | None = None,
        headers: dict[str, str] | None = None,
        follow_redirects: bool = True,
    ) -> None:
        self.async_backend = _AsyncBackend(
            backend=backend, backend_options=backend_options or {}
        )
        if _is_asgi3(app):
            asgi_app = app
        else:
            app = typing.cast(ASGI2App, app)  # type: ignore[assignment]
            asgi_app = _WrapASGI2(app)  # type: ignore[arg-type]
        self.app = asgi_app
        self.app_state: dict[str, typing.Any] = {}
        transport = _TestClientTransport(
            self.app,
            portal_factory=self._portal_factory,
            raise_server_exceptions=raise_server_exceptions,
            root_path=root_path,
            app_state=self.app_state,
        )
        if headers is None:
            headers = {}
        headers.setdefault("user-agent", "testclient")
>       super().__init__(
            app=self.app,
            base_url=base_url,
            headers=headers,
            transport=transport,
            follow_redirects=follow_redirects,
            cookies=cookies,
        )
E       TypeError: Client.__init__() got an unexpected keyword argument 'app'

venv/lib/python3.11/site-packages/starlette/testclient.py:429: TypeError
_________ TestHealthEndpoint.test_health_endpoint_without_adapter_date _________

self = <tests.test_adapter_hot_swap.TestHealthEndpoint testMethod=test_health_endpoint_without_adapter_date>

    def setUp(self):
        """Set up the test client before each test."""
>       self.client = TestClient(app)
                      ^^^^^^^^^^^^^^^

tests/test_adapter_hot_swap.py:183: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <starlette.testclient.TestClient object at 0x7fc452a9f590>
app = <fastapi.applications.FastAPI object at 0x7fc4738b6090>
base_url = 'http://testserver', raise_server_exceptions = True, root_path = ''
backend = 'asyncio', backend_options = None, cookies = None
headers = {'user-agent': 'testclient'}, follow_redirects = True

    def __init__(
        self,
        app: ASGIApp,
        base_url: str = "http://testserver",
        raise_server_exceptions: bool = True,
        root_path: str = "",
        backend: typing.Literal["asyncio", "trio"] = "asyncio",
        backend_options: dict[str, typing.Any] | None = None,
        cookies: httpx._types.CookieTypes | None = None,
        headers: dict[str, str] | None = None,
        follow_redirects: bool = True,
    ) -> None:
        self.async_backend = _AsyncBackend(
            backend=backend, backend_options=backend_options or {}
        )
        if _is_asgi3(app):
            asgi_app = app
        else:
            app = typing.cast(ASGI2App, app)  # type: ignore[assignment]
            asgi_app = _WrapASGI2(app)  # type: ignore[arg-type]
        self.app = asgi_app
        self.app_state: dict[str, typing.Any] = {}
        transport = _TestClientTransport(
            self.app,
            portal_factory=self._portal_factory,
            raise_server_exceptions=raise_server_exceptions,
            root_path=root_path,
            app_state=self.app_state,
        )
        if headers is None:
            headers = {}
        headers.setdefault("user-agent", "testclient")
>       super().__init__(
            app=self.app,
            base_url=base_url,
            headers=headers,
            transport=transport,
            follow_redirects=follow_redirects,
            cookies=cookies,
        )
E       TypeError: Client.__init__() got an unexpected keyword argument 'app'

venv/lib/python3.11/site-packages/starlette/testclient.py:429: TypeError
_____________________________ test_feedback_append _____________________________

self = LanceTable(name='phi3_feedback', version=2, _conn=LanceDBConnection(uri='/tmp/pytest-of-root/pytest-0/test_feedback_append0/lancedb_test'))
kwargs = {}

    def to_lance(self, **kwargs) -> lance.LanceDataset:
        """Return the LanceDataset backing this table."""
        try:
>           import lance
E           ModuleNotFoundError: No module named 'lance'

venv/lib/python3.11/site-packages/lancedb/table.py:1600: ModuleNotFoundError

During handling of the above exception, another exception occurred:

setup_temp_db = LanceDBConnection(uri='/tmp/pytest-of-root/pytest-0/test_feedback_append0/lancedb_test')

    def test_feedback_append(setup_temp_db):
        """Ensure feedback can be appended when the DB is correctly initialised."""
        # The setup_temp_db fixture ensures feedback_tbl is a valid table object
    
        initial_count = 0
        try:
            # Use the global feedback_tbl which is patched by the fixture
            initial_count = lls_db.feedback_tbl.to_lance().count_rows()
        except Exception:
            pass
    
        # Create an instance of the Pydantic model
        feedback_instance = Phi3FeedbackSchema(
            transaction_id="test123",
            feedback_type="rating",
            feedback_content="âœ…",
        )
    
        # The original code had a bug using model_dump which may not exist.
        # .dict() is a safer alternative for Pydantic v1/v2 compatibility.
        lls_db.feedback_tbl.add([feedback_instance.dict()])
    
        # Verify the row was added
>       final_count = lls_db.feedback_tbl.to_lance().count_rows()
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_db.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = LanceTable(name='phi3_feedback', version=2, _conn=LanceDBConnection(uri='/tmp/pytest-of-root/pytest-0/test_feedback_append0/lancedb_test'))
kwargs = {}

    def to_lance(self, **kwargs) -> lance.LanceDataset:
        """Return the LanceDataset backing this table."""
        try:
            import lance
        except ImportError:
>           raise ImportError(
                "The lance library is required to use this function. "
                "Please install with `pip install pylance`."
            )
E           ImportError: The lance library is required to use this function. Please install with `pip install pylance`.

venv/lib/python3.11/site-packages/lancedb/table.py:1602: ImportError
---------------------------- Captured stderr setup -----------------------------
[2025-06-08T05:24:32Z WARN  lance::dataset::write::insert] No existing dataset at /tmp/pytest-of-root/pytest-0/test_feedback_append0/lancedb_test/phi3_feedback.lance, it will be created
____________ TestFeedbackMechanism.test_load_recent_feedback_logic _____________

self = <tests.test_feedback_mechanism.TestFeedbackMechanism testMethod=test_load_recent_feedback_logic>

    def setUp(self):
>       self.client = TestClient(app)
                      ^^^^^^^^^^^^^^^

tests/test_feedback_mechanism.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <starlette.testclient.TestClient object at 0x7fc47163d5d0>
app = <fastapi.applications.FastAPI object at 0x7fc4738b6090>
base_url = 'http://testserver', raise_server_exceptions = True, root_path = ''
backend = 'asyncio', backend_options = None, cookies = None
headers = {'user-agent': 'testclient'}, follow_redirects = True

    def __init__(
        self,
        app: ASGIApp,
        base_url: str = "http://testserver",
        raise_server_exceptions: bool = True,
        root_path: str = "",
        backend: typing.Literal["asyncio", "trio"] = "asyncio",
        backend_options: dict[str, typing.Any] | None = None,
        cookies: httpx._types.CookieTypes | None = None,
        headers: dict[str, str] | None = None,
        follow_redirects: bool = True,
    ) -> None:
        self.async_backend = _AsyncBackend(
            backend=backend, backend_options=backend_options or {}
        )
        if _is_asgi3(app):
            asgi_app = app
        else:
            app = typing.cast(ASGI2App, app)  # type: ignore[assignment]
            asgi_app = _WrapASGI2(app)  # type: ignore[arg-type]
        self.app = asgi_app
        self.app_state: dict[str, typing.Any] = {}
        transport = _TestClientTransport(
            self.app,
            portal_factory=self._portal_factory,
            raise_server_exceptions=raise_server_exceptions,
            root_path=root_path,
            app_state=self.app_state,
        )
        if headers is None:
            headers = {}
        headers.setdefault("user-agent", "testclient")
>       super().__init__(
            app=self.app,
            base_url=base_url,
            headers=headers,
            transport=transport,
            follow_redirects=follow_redirects,
            cookies=cookies,
        )
E       TypeError: Client.__init__() got an unexpected keyword argument 'app'

venv/lib/python3.11/site-packages/starlette/testclient.py:429: TypeError
___________ TestFeedbackMechanism.test_log_propose_trade_adjustments ___________

self = <tests.test_feedback_mechanism.TestFeedbackMechanism testMethod=test_log_propose_trade_adjustments>

    def setUp(self):
>       self.client = TestClient(app)
                      ^^^^^^^^^^^^^^^

tests/test_feedback_mechanism.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <starlette.testclient.TestClient object at 0x7fc494837110>
app = <fastapi.applications.FastAPI object at 0x7fc4738b6090>
base_url = 'http://testserver', raise_server_exceptions = True, root_path = ''
backend = 'asyncio', backend_options = None, cookies = None
headers = {'user-agent': 'testclient'}, follow_redirects = True

    def __init__(
        self,
        app: ASGIApp,
        base_url: str = "http://testserver",
        raise_server_exceptions: bool = True,
        root_path: str = "",
        backend: typing.Literal["asyncio", "trio"] = "asyncio",
        backend_options: dict[str, typing.Any] | None = None,
        cookies: httpx._types.CookieTypes | None = None,
        headers: dict[str, str] | None = None,
        follow_redirects: bool = True,
    ) -> None:
        self.async_backend = _AsyncBackend(
            backend=backend, backend_options=backend_options or {}
        )
        if _is_asgi3(app):
            asgi_app = app
        else:
            app = typing.cast(ASGI2App, app)  # type: ignore[assignment]
            asgi_app = _WrapASGI2(app)  # type: ignore[arg-type]
        self.app = asgi_app
        self.app_state: dict[str, typing.Any] = {}
        transport = _TestClientTransport(
            self.app,
            portal_factory=self._portal_factory,
            raise_server_exceptions=raise_server_exceptions,
            root_path=root_path,
            app_state=self.app_state,
        )
        if headers is None:
            headers = {}
        headers.setdefault("user-agent", "testclient")
>       super().__init__(
            app=self.app,
            base_url=base_url,
            headers=headers,
            transport=transport,
            follow_redirects=follow_redirects,
            cookies=cookies,
        )
E       TypeError: Client.__init__() got an unexpected keyword argument 'app'

venv/lib/python3.11/site-packages/starlette/testclient.py:429: TypeError
_____________ TestFeedbackMechanism.test_prompt_augmentation_logic _____________

self = <tests.test_feedback_mechanism.TestFeedbackMechanism testMethod=test_prompt_augmentation_logic>

    def setUp(self):
>       self.client = TestClient(app)
                      ^^^^^^^^^^^^^^^

tests/test_feedback_mechanism.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <starlette.testclient.TestClient object at 0x7fc452a93290>
app = <fastapi.applications.FastAPI object at 0x7fc4738b6090>
base_url = 'http://testserver', raise_server_exceptions = True, root_path = ''
backend = 'asyncio', backend_options = None, cookies = None
headers = {'user-agent': 'testclient'}, follow_redirects = True

    def __init__(
        self,
        app: ASGIApp,
        base_url: str = "http://testserver",
        raise_server_exceptions: bool = True,
        root_path: str = "",
        backend: typing.Literal["asyncio", "trio"] = "asyncio",
        backend_options: dict[str, typing.Any] | None = None,
        cookies: httpx._types.CookieTypes | None = None,
        headers: dict[str, str] | None = None,
        follow_redirects: bool = True,
    ) -> None:
        self.async_backend = _AsyncBackend(
            backend=backend, backend_options=backend_options or {}
        )
        if _is_asgi3(app):
            asgi_app = app
        else:
            app = typing.cast(ASGI2App, app)  # type: ignore[assignment]
            asgi_app = _WrapASGI2(app)  # type: ignore[arg-type]
        self.app = asgi_app
        self.app_state: dict[str, typing.Any] = {}
        transport = _TestClientTransport(
            self.app,
            portal_factory=self._portal_factory,
            raise_server_exceptions=raise_server_exceptions,
            root_path=root_path,
            app_state=self.app_state,
        )
        if headers is None:
            headers = {}
        headers.setdefault("user-agent", "testclient")
>       super().__init__(
            app=self.app,
            base_url=base_url,
            headers=headers,
            transport=transport,
            follow_redirects=follow_redirects,
            cookies=cookies,
        )
E       TypeError: Client.__init__() got an unexpected keyword argument 'app'

venv/lib/python3.11/site-packages/starlette/testclient.py:429: TypeError
_____________ TestFeedbackMechanism.test_submit_feedback_endpoint ______________

self = <tests.test_feedback_mechanism.TestFeedbackMechanism testMethod=test_submit_feedback_endpoint>

    def setUp(self):
>       self.client = TestClient(app)
                      ^^^^^^^^^^^^^^^

tests/test_feedback_mechanism.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <starlette.testclient.TestClient object at 0x7fc4508f8290>
app = <fastapi.applications.FastAPI object at 0x7fc4738b6090>
base_url = 'http://testserver', raise_server_exceptions = True, root_path = ''
backend = 'asyncio', backend_options = None, cookies = None
headers = {'user-agent': 'testclient'}, follow_redirects = True

    def __init__(
        self,
        app: ASGIApp,
        base_url: str = "http://testserver",
        raise_server_exceptions: bool = True,
        root_path: str = "",
        backend: typing.Literal["asyncio", "trio"] = "asyncio",
        backend_options: dict[str, typing.Any] | None = None,
        cookies: httpx._types.CookieTypes | None = None,
        headers: dict[str, str] | None = None,
        follow_redirects: bool = True,
    ) -> None:
        self.async_backend = _AsyncBackend(
            backend=backend, backend_options=backend_options or {}
        )
        if _is_asgi3(app):
            asgi_app = app
        else:
            app = typing.cast(ASGI2App, app)  # type: ignore[assignment]
            asgi_app = _WrapASGI2(app)  # type: ignore[arg-type]
        self.app = asgi_app
        self.app_state: dict[str, typing.Any] = {}
        transport = _TestClientTransport(
            self.app,
            portal_factory=self._portal_factory,
            raise_server_exceptions=raise_server_exceptions,
            root_path=root_path,
            app_state=self.app_state,
        )
        if headers is None:
            headers = {}
        headers.setdefault("user-agent", "testclient")
>       super().__init__(
            app=self.app,
            base_url=base_url,
            headers=headers,
            transport=transport,
            follow_redirects=follow_redirects,
            cookies=cookies,
        )
E       TypeError: Client.__init__() got an unexpected keyword argument 'app'

venv/lib/python3.11/site-packages/starlette/testclient.py:429: TypeError
_________________ test_harvest_feedback_py_filters_by_version __________________

tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7fc49696cc90>, _basetemp=PosixPath('/tmp/pytest-of-root/pytest-0'), _retention_count=3, _retention_policy='all')
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fc470061210>

    @pytest.mark.asyncio
    async def test_harvest_feedback_py_filters_by_version(tmp_path_factory, monkeypatch):
        """
        Integration-like test for the `scripts/harvest_feedback.py` script.
        This test verifies that the script correctly filters records from LanceDB
        based on the --schema-version, --days-back, and feedback_type criteria.
        """
        # Setup temporary paths for the database and output file
        db_path = tmp_path_factory.mktemp("lancedb_harvest_test")
        output_file = db_path / "harvested_data.jsonl"
        db = lancedb.connect(db_path)
        table_name = "phi3_feedback"
    
        # --- Test Data Setup ---
        now_ns = int(datetime.datetime.now(datetime.timezone.utc).timestamp() * 1e9)
        old_ns = int((datetime.datetime.now(datetime.timezone.utc) - datetime.timedelta(days=10)).timestamp() * 1e9)
    
        # Define a set of records with varying attributes to test filtering logic
        records_to_add = [
            # Should be harvested: version 1.0, type 'correction', recent
            {"transaction_id": "rec1_v1_correct_recent", "schema_version": "1.0", "feedback_type": "correction", "when": now_ns},
            # Should NOT be harvested: wrong version
            {"transaction_id": "rec2_v0.9_correct_recent", "schema_version": "0.9", "feedback_type": "correction", "when": now_ns},
            # Should NOT be harvested: wrong feedback_type
            {"transaction_id": "rec3_v1_other_recent", "schema_version": "1.0", "feedback_type": "other_type", "when": now_ns},
            # Should NOT be harvested: too old
            {"transaction_id": "rec4_v1_correct_old", "schema_version": "1.0", "feedback_type": "correction", "when": old_ns},
            # Should be harvested: version 1.0.1 (matches "1.0" prefix), recent, correct type
            {"transaction_id": "rec5_v1.0.1_correct_recent", "schema_version": "1.0.1", "feedback_type": "correction", "when": now_ns},
        ]
        # Add common data to all records
        for rec in records_to_add:
            rec.update({
                "feedback_content": "test content",
                "timestamp": datetime.datetime.now(datetime.timezone.utc).isoformat(),
                "corrected_proposal": json.dumps({"action": "adjust", "ticker": "TEST"})
            })
    
        # --- Create and Populate LanceDB Table ---
        # This block robustly creates the table, handling potential differences in LanceDB versions
        try:
            table = db.create_table(table_name, schema=FeedbackSchemaForHarvestTest, mode="overwrite")
            table.add(records_to_add)
        except Exception:
            if table_name in db.table_names():
                db.drop_table(table_name)
            table = db.create_table(table_name, data=records_to_add, mode="overwrite")
    
        # --- Mock Dependencies for the Script ---
        monkeypatch.setattr(lancedb, "connect", lambda path: db)
        # Mock sys.argv to simulate running the script from the command line
        test_argv = [
            "scripts/harvest_feedback.py",
            "--days-back", "1",
            "--schema-version", "1.0",
            "--out", str(output_file),
        ]
        monkeypatch.setattr(sys, "argv", test_argv)
    
        # --- Execute the Harvest Script ---
        harvest_main()
    
        # --- Assertions ---
        assert output_file.exists(), "Harvest script did not create an output file."
        harvested_records = []
        with open(output_file, "r") as f:
            for line in f:
                harvested_records.append(json.loads(line))
    
>       assert len(harvested_records) == 2, "Harvest script did not filter records correctly."
E       AssertionError: Harvest script did not filter records correctly.
E       assert 0 == 2
E        +  where 0 = len([])

tests/test_feedback_versioning.py:212: AssertionError
----------------------------- Captured stdout call -----------------------------
Successfully wrote 0 records to /tmp/pytest-of-root/pytest-0/lancedb_harvest_test0/harvested_data.jsonl
----------------------------- Captured stderr call -----------------------------
[2025-06-08T05:24:34Z WARN  lance::dataset::write::insert] No existing dataset at /tmp/pytest-of-root/pytest-0/lancedb_harvest_test0/phi3_feedback.lance, it will be created
[2025-06-08T05:24:34Z WARN  lance::dataset::scanner] nprobes is not set because nearest has not been called yet
_______________________ test_migrate_feedback_py_script ________________________

tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7fc49696cc90>, _basetemp=PosixPath('/tmp/pytest-of-root/pytest-0'), _retention_count=3, _retention_policy='all')
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fc470063b50>

    @pytest.mark.asyncio
    async def test_migrate_feedback_py_script(tmp_path_factory, monkeypatch):
        """
        Integration-like test for the `scripts/migrate_feedback.py` script.
        This test verifies that the migration script correctly identifies records
        with missing or outdated schema versions and updates them to "1.0".
        """
        db_path = tmp_path_factory.mktemp("lancedb_migrate_test")
        db_conn = lancedb.connect(db_path)
        table_name = "phi3_feedback"
    
        # --- Test Data Setup ---
        # Record A: Simulates a very old record with no schema_version field.
        record_A_dict = {
            "transaction_id": "a", "timestamp": "ts_a", "feedback_type": "type_a",
            "feedback_content": "content_a", "corrected_proposal": {"key": "val_a"},
        }
        # Record B: Simulates an older record with an outdated schema version.
        record_B_dict = {
            "transaction_id": "b", "timestamp": "ts_b", "feedback_type": "type_b",
            "feedback_content": "content_b", "corrected_proposal": {"key": "val_b"},
            "schema_version": "0.8",
        }
        # Record C: Simulates a modern record that should not be changed.
        record_C_dict = {
            "transaction_id": "c", "timestamp": "ts_c", "feedback_type": "type_c",
            "feedback_content": "content_c", "corrected_proposal": {"key": "val_c"},
            "schema_version": "1.0",
        }
    
        if table_name in db_conn.table_names():
            db_conn.drop_table(table_name)
    
        # Create the initial table, letting LanceDB infer the schema from data
        # that includes records with and without the 'schema_version' field.
        table = db_conn.create_table(
            table_name,
            data=[record_A_dict, record_B_dict, record_C_dict],
            mode="overwrite",
        )
    
        # --- Mocking Dependencies for the Script ---
        monkeypatch.setattr("osiris.scripts.migrate_feedback.lancedb.connect", lambda path: db_conn)
        monkeypatch.setattr("osiris.scripts.migrate_feedback.os.makedirs", lambda path, exist_ok=False: None, raising=False)
    
        # --- Execute the Migration Script ---
        migrate_main()
    
        # --- Assertions ---
        migrated_table = db_conn.open_table(table_name)
        results = migrated_table.search().to_list()
        assert len(results) == 3
    
        # Check that ALL records now have the correct schema_version "1.0".
        for record in results:
>           assert record.get("schema_version") == "1.0", f"Record {record.get('transaction_id')} was not migrated correctly."
E           AssertionError: Record a was not migrated correctly.
E           assert None == '1.0'
E            +  where None = <built-in method get of dict object at 0x7fc4705725c0>('schema_version')
E            +    where <built-in method get of dict object at 0x7fc4705725c0> = {'corrected_proposal': {'key': 'val_a'}, 'feedback_content': 'content_a', 'feedback_type': 'type_a', 'timestamp': 'ts_a', ...}.get

tests/test_feedback_versioning.py:273: AssertionError
----------------------------- Captured stdout call -----------------------------
Starting migration for table 'phi3_feedback' in database '/app/lancedb_data'...
Successfully opened original table 'phi3_feedback'.
Read 3 records from 'phi3_feedback'.
Processed 3 records. Added 'schema_version' where missing.
Error creating temporary table 'phi3_feedback_migrated'. Schema must be an instance of pyarrow.Schema
----------------------------- Captured stderr call -----------------------------
[2025-06-08T05:24:35Z WARN  lance::dataset::write::insert] No existing dataset at /tmp/pytest-of-root/pytest-0/lancedb_migrate_test0/phi3_feedback.lance, it will be created
[2025-06-08T05:24:35Z WARN  lance::dataset::scanner] nprobes is not set because nearest has not been called yet
[2025-06-08T05:24:35Z WARN  lance::dataset::scanner] nprobes is not set because nearest has not been called yet
___________________ TestLLMClient.test_exceed_retries_raises ___________________

self = <tests.test_llm_client.TestLLMClient testMethod=test_exceed_retries_raises>

    def test_exceed_retries_raises(self):
        client = LLMClient(base_url="http://test", retries=2, backoff_factor=0)
        error_resp = _mock_response(status_code=500)
        with patch.object(
            client.session, "request", side_effect=[error_resp, error_resp, error_resp]
        ):
            with self.assertRaises(requests.exceptions.HTTPError):
>               client.generate("phi3", "prompt")

tests/test_llm_client.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def generate(
        self, model_id: str, prompt: str, max_length: int = 256
    ) -> Dict[str, Any]:
        resp = self._request_with_retry(
            "POST",
            f"/generate?model_id={model_id}",
            json={"prompt": prompt, "max_length": max_length},
        )
>       return resp.json()
               ^^^^^^^^^
E       AttributeError: 'NoneType' object has no attribute 'json'

osiris/llm_client.py:63: AttributeError
_______________________ TestLLMClient.test_retry_on_5xx ________________________

self = <tests.test_llm_client.TestLLMClient testMethod=test_retry_on_5xx>

    def test_retry_on_5xx(self):
        client = LLMClient(
            base_url="http://test", timeout=1, retries=2, backoff_factor=0
        )
        first = _mock_response(status_code=500)
        second = _mock_response(status_code=200, json_data={"ok": True})
        with patch.object(
            client.session, "request", side_effect=[first, second]
        ) as mock_request:
>           result = client.generate("phi3", "prompt")
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_llm_client.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <osiris.llm_client.LLMClient object at 0x7fc4509163d0>, model_id = 'phi3'
prompt = 'prompt', max_length = 256

    def generate(
        self, model_id: str, prompt: str, max_length: int = 256
    ) -> Dict[str, Any]:
        resp = self._request_with_retry(
            "POST",
            f"/generate?model_id={model_id}",
            json={"prompt": prompt, "max_length": max_length},
        )
>       return resp.json()
               ^^^^^^^^^
E       AttributeError: 'NoneType' object has no attribute 'json'

osiris/llm_client.py:63: AttributeError
____________________ test_generate_hermes_default_model_id _____________________

    def test_generate_hermes_default_model_id():
        """Test /generate/ with default model_id (hermes)"""
        with (
            patch("osiris.server.get_hermes_model_and_tokenizer", return_value=(MagicMock(), MagicMock())) as mock_get_hermes,
            patch("osiris.server._generate_hermes_text", new_callable=AsyncMock, return_value="Hermes mock output") as mock_generate_hermes,
        ):
>           client = TestClient(app)
                     ^^^^^^^^^^^^^^^

tests/test_server.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <starlette.testclient.TestClient object at 0x7fc4705e9710>
app = <fastapi.applications.FastAPI object at 0x7fc4738b6090>
base_url = 'http://testserver', raise_server_exceptions = True, root_path = ''
backend = 'asyncio', backend_options = None, cookies = None
headers = {'user-agent': 'testclient'}, follow_redirects = True

    def __init__(
        self,
        app: ASGIApp,
        base_url: str = "http://testserver",
        raise_server_exceptions: bool = True,
        root_path: str = "",
        backend: typing.Literal["asyncio", "trio"] = "asyncio",
        backend_options: dict[str, typing.Any] | None = None,
        cookies: httpx._types.CookieTypes | None = None,
        headers: dict[str, str] | None = None,
        follow_redirects: bool = True,
    ) -> None:
        self.async_backend = _AsyncBackend(
            backend=backend, backend_options=backend_options or {}
        )
        if _is_asgi3(app):
            asgi_app = app
        else:
            app = typing.cast(ASGI2App, app)  # type: ignore[assignment]
            asgi_app = _WrapASGI2(app)  # type: ignore[arg-type]
        self.app = asgi_app
        self.app_state: dict[str, typing.Any] = {}
        transport = _TestClientTransport(
            self.app,
            portal_factory=self._portal_factory,
            raise_server_exceptions=raise_server_exceptions,
            root_path=root_path,
            app_state=self.app_state,
        )
        if headers is None:
            headers = {}
        headers.setdefault("user-agent", "testclient")
>       super().__init__(
            app=self.app,
            base_url=base_url,
            headers=headers,
            transport=transport,
            follow_redirects=follow_redirects,
            cookies=cookies,
        )
E       TypeError: Client.__init__() got an unexpected keyword argument 'app'

venv/lib/python3.11/site-packages/starlette/testclient.py:429: TypeError
_____________________ test_generate_phi3_explicit_model_id _____________________

    def test_generate_phi3_explicit_model_id():
        """Test /generate/ with explicit model_id='phi3'"""
        mock_phi3_output = {"phi3_mock_output": "success"}
        with (
            patch("osiris.server.get_phi3_model_and_tokenizer", return_value=(MagicMock(), MagicMock())) as mock_get_phi3,
            patch("osiris.server._generate_phi3_json", new_callable=AsyncMock, return_value=mock_phi3_output) as mock_generate_phi3,
        ):
>           client = TestClient(app)
                     ^^^^^^^^^^^^^^^

tests/test_server.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <starlette.testclient.TestClient object at 0x7fc47004f8d0>
app = <fastapi.applications.FastAPI object at 0x7fc4738b6090>
base_url = 'http://testserver', raise_server_exceptions = True, root_path = ''
backend = 'asyncio', backend_options = None, cookies = None
headers = {'user-agent': 'testclient'}, follow_redirects = True

    def __init__(
        self,
        app: ASGIApp,
        base_url: str = "http://testserver",
        raise_server_exceptions: bool = True,
        root_path: str = "",
        backend: typing.Literal["asyncio", "trio"] = "asyncio",
        backend_options: dict[str, typing.Any] | None = None,
        cookies: httpx._types.CookieTypes | None = None,
        headers: dict[str, str] | None = None,
        follow_redirects: bool = True,
    ) -> None:
        self.async_backend = _AsyncBackend(
            backend=backend, backend_options=backend_options or {}
        )
        if _is_asgi3(app):
            asgi_app = app
        else:
            app = typing.cast(ASGI2App, app)  # type: ignore[assignment]
            asgi_app = _WrapASGI2(app)  # type: ignore[arg-type]
        self.app = asgi_app
        self.app_state: dict[str, typing.Any] = {}
        transport = _TestClientTransport(
            self.app,
            portal_factory=self._portal_factory,
            raise_server_exceptions=raise_server_exceptions,
            root_path=root_path,
            app_state=self.app_state,
        )
        if headers is None:
            headers = {}
        headers.setdefault("user-agent", "testclient")
>       super().__init__(
            app=self.app,
            base_url=base_url,
            headers=headers,
            transport=transport,
            follow_redirects=follow_redirects,
            cookies=cookies,
        )
E       TypeError: Client.__init__() got an unexpected keyword argument 'app'

venv/lib/python3.11/site-packages/starlette/testclient.py:429: TypeError
________________ test_generate_invalid_model_id[invalid_model] _________________

bad_id = 'invalid_model'

    @pytest.mark.parametrize("bad_id", ["invalid_model", "nonsense", "bad"])
    def test_generate_invalid_model_id(bad_id: str):
        """/generate/ rejects unknown model_id values with 422"""
>       client = TestClient(app)
                 ^^^^^^^^^^^^^^^

tests/test_server.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <starlette.testclient.TestClient object at 0x7fc452af5250>
app = <fastapi.applications.FastAPI object at 0x7fc4738b6090>
base_url = 'http://testserver', raise_server_exceptions = True, root_path = ''
backend = 'asyncio', backend_options = None, cookies = None
headers = {'user-agent': 'testclient'}, follow_redirects = True

    def __init__(
        self,
        app: ASGIApp,
        base_url: str = "http://testserver",
        raise_server_exceptions: bool = True,
        root_path: str = "",
        backend: typing.Literal["asyncio", "trio"] = "asyncio",
        backend_options: dict[str, typing.Any] | None = None,
        cookies: httpx._types.CookieTypes | None = None,
        headers: dict[str, str] | None = None,
        follow_redirects: bool = True,
    ) -> None:
        self.async_backend = _AsyncBackend(
            backend=backend, backend_options=backend_options or {}
        )
        if _is_asgi3(app):
            asgi_app = app
        else:
            app = typing.cast(ASGI2App, app)  # type: ignore[assignment]
            asgi_app = _WrapASGI2(app)  # type: ignore[arg-type]
        self.app = asgi_app
        self.app_state: dict[str, typing.Any] = {}
        transport = _TestClientTransport(
            self.app,
            portal_factory=self._portal_factory,
            raise_server_exceptions=raise_server_exceptions,
            root_path=root_path,
            app_state=self.app_state,
        )
        if headers is None:
            headers = {}
        headers.setdefault("user-agent", "testclient")
>       super().__init__(
            app=self.app,
            base_url=base_url,
            headers=headers,
            transport=transport,
            follow_redirects=follow_redirects,
            cookies=cookies,
        )
E       TypeError: Client.__init__() got an unexpected keyword argument 'app'

venv/lib/python3.11/site-packages/starlette/testclient.py:429: TypeError
___________________ test_generate_invalid_model_id[nonsense] ___________________

bad_id = 'nonsense'

    @pytest.mark.parametrize("bad_id", ["invalid_model", "nonsense", "bad"])
    def test_generate_invalid_model_id(bad_id: str):
        """/generate/ rejects unknown model_id values with 422"""
>       client = TestClient(app)
                 ^^^^^^^^^^^^^^^

tests/test_server.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <starlette.testclient.TestClient object at 0x7fc4705acb10>
app = <fastapi.applications.FastAPI object at 0x7fc4738b6090>
base_url = 'http://testserver', raise_server_exceptions = True, root_path = ''
backend = 'asyncio', backend_options = None, cookies = None
headers = {'user-agent': 'testclient'}, follow_redirects = True

    def __init__(
        self,
        app: ASGIApp,
        base_url: str = "http://testserver",
        raise_server_exceptions: bool = True,
        root_path: str = "",
        backend: typing.Literal["asyncio", "trio"] = "asyncio",
        backend_options: dict[str, typing.Any] | None = None,
        cookies: httpx._types.CookieTypes | None = None,
        headers: dict[str, str] | None = None,
        follow_redirects: bool = True,
    ) -> None:
        self.async_backend = _AsyncBackend(
            backend=backend, backend_options=backend_options or {}
        )
        if _is_asgi3(app):
            asgi_app = app
        else:
            app = typing.cast(ASGI2App, app)  # type: ignore[assignment]
            asgi_app = _WrapASGI2(app)  # type: ignore[arg-type]
        self.app = asgi_app
        self.app_state: dict[str, typing.Any] = {}
        transport = _TestClientTransport(
            self.app,
            portal_factory=self._portal_factory,
            raise_server_exceptions=raise_server_exceptions,
            root_path=root_path,
            app_state=self.app_state,
        )
        if headers is None:
            headers = {}
        headers.setdefault("user-agent", "testclient")
>       super().__init__(
            app=self.app,
            base_url=base_url,
            headers=headers,
            transport=transport,
            follow_redirects=follow_redirects,
            cookies=cookies,
        )
E       TypeError: Client.__init__() got an unexpected keyword argument 'app'

venv/lib/python3.11/site-packages/starlette/testclient.py:429: TypeError
_____________________ test_generate_invalid_model_id[bad] ______________________

bad_id = 'bad'

    @pytest.mark.parametrize("bad_id", ["invalid_model", "nonsense", "bad"])
    def test_generate_invalid_model_id(bad_id: str):
        """/generate/ rejects unknown model_id values with 422"""
>       client = TestClient(app)
                 ^^^^^^^^^^^^^^^

tests/test_server.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <starlette.testclient.TestClient object at 0x7fc452a38350>
app = <fastapi.applications.FastAPI object at 0x7fc4738b6090>
base_url = 'http://testserver', raise_server_exceptions = True, root_path = ''
backend = 'asyncio', backend_options = None, cookies = None
headers = {'user-agent': 'testclient'}, follow_redirects = True

    def __init__(
        self,
        app: ASGIApp,
        base_url: str = "http://testserver",
        raise_server_exceptions: bool = True,
        root_path: str = "",
        backend: typing.Literal["asyncio", "trio"] = "asyncio",
        backend_options: dict[str, typing.Any] | None = None,
        cookies: httpx._types.CookieTypes | None = None,
        headers: dict[str, str] | None = None,
        follow_redirects: bool = True,
    ) -> None:
        self.async_backend = _AsyncBackend(
            backend=backend, backend_options=backend_options or {}
        )
        if _is_asgi3(app):
            asgi_app = app
        else:
            app = typing.cast(ASGI2App, app)  # type: ignore[assignment]
            asgi_app = _WrapASGI2(app)  # type: ignore[arg-type]
        self.app = asgi_app
        self.app_state: dict[str, typing.Any] = {}
        transport = _TestClientTransport(
            self.app,
            portal_factory=self._portal_factory,
            raise_server_exceptions=raise_server_exceptions,
            root_path=root_path,
            app_state=self.app_state,
        )
        if headers is None:
            headers = {}
        headers.setdefault("user-agent", "testclient")
>       super().__init__(
            app=self.app,
            base_url=base_url,
            headers=headers,
            transport=transport,
            follow_redirects=follow_redirects,
            cookies=cookies,
        )
E       TypeError: Client.__init__() got an unexpected keyword argument 'app'

venv/lib/python3.11/site-packages/starlette/testclient.py:429: TypeError
___________________ test_score_proposal_with_hermes_success ____________________

    def test_score_proposal_with_hermes_success():
        """Test /score/hermes/ endpoint successful scoring."""
        with (
            patch("osiris.server.score_with_hermes", return_value=0.75) as mock_score_func,
            patch("osiris.server.db.log_hermes_score", return_value=None) as mock_log_score,
        ):
>           client = TestClient(app)
                     ^^^^^^^^^^^^^^^

tests/test_server.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <starlette.testclient.TestClient object at 0x7fc452af7650>
app = <fastapi.applications.FastAPI object at 0x7fc4738b6090>
base_url = 'http://testserver', raise_server_exceptions = True, root_path = ''
backend = 'asyncio', backend_options = None, cookies = None
headers = {'user-agent': 'testclient'}, follow_redirects = True

    def __init__(
        self,
        app: ASGIApp,
        base_url: str = "http://testserver",
        raise_server_exceptions: bool = True,
        root_path: str = "",
        backend: typing.Literal["asyncio", "trio"] = "asyncio",
        backend_options: dict[str, typing.Any] | None = None,
        cookies: httpx._types.CookieTypes | None = None,
        headers: dict[str, str] | None = None,
        follow_redirects: bool = True,
    ) -> None:
        self.async_backend = _AsyncBackend(
            backend=backend, backend_options=backend_options or {}
        )
        if _is_asgi3(app):
            asgi_app = app
        else:
            app = typing.cast(ASGI2App, app)  # type: ignore[assignment]
            asgi_app = _WrapASGI2(app)  # type: ignore[arg-type]
        self.app = asgi_app
        self.app_state: dict[str, typing.Any] = {}
        transport = _TestClientTransport(
            self.app,
            portal_factory=self._portal_factory,
            raise_server_exceptions=raise_server_exceptions,
            root_path=root_path,
            app_state=self.app_state,
        )
        if headers is None:
            headers = {}
        headers.setdefault("user-agent", "testclient")
>       super().__init__(
            app=self.app,
            base_url=base_url,
            headers=headers,
            transport=transport,
            follow_redirects=follow_redirects,
            cookies=cookies,
        )
E       TypeError: Client.__init__() got an unexpected keyword argument 'app'

venv/lib/python3.11/site-packages/starlette/testclient.py:429: TypeError
___________________ test_health_endpoint_db_query_exception ____________________

    def test_health_endpoint_db_query_exception():
        """Test /health endpoint when DB query raises an exception."""
        mock_table = MagicMock()
        mock_table.search.side_effect = Exception("Simulated DB error")
        with (
            patch("osiris.server.logger.error") as mock_logger_error,
            patch.dict(db._tables, {"hermes_scores": mock_table}),
        ):
>           client = TestClient(app)
                     ^^^^^^^^^^^^^^^

tests/test_server.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <starlette.testclient.TestClient object at 0x7fc470551e50>
app = <fastapi.applications.FastAPI object at 0x7fc4738b6090>
base_url = 'http://testserver', raise_server_exceptions = True, root_path = ''
backend = 'asyncio', backend_options = None, cookies = None
headers = {'user-agent': 'testclient'}, follow_redirects = True

    def __init__(
        self,
        app: ASGIApp,
        base_url: str = "http://testserver",
        raise_server_exceptions: bool = True,
        root_path: str = "",
        backend: typing.Literal["asyncio", "trio"] = "asyncio",
        backend_options: dict[str, typing.Any] | None = None,
        cookies: httpx._types.CookieTypes | None = None,
        headers: dict[str, str] | None = None,
        follow_redirects: bool = True,
    ) -> None:
        self.async_backend = _AsyncBackend(
            backend=backend, backend_options=backend_options or {}
        )
        if _is_asgi3(app):
            asgi_app = app
        else:
            app = typing.cast(ASGI2App, app)  # type: ignore[assignment]
            asgi_app = _WrapASGI2(app)  # type: ignore[arg-type]
        self.app = asgi_app
        self.app_state: dict[str, typing.Any] = {}
        transport = _TestClientTransport(
            self.app,
            portal_factory=self._portal_factory,
            raise_server_exceptions=raise_server_exceptions,
            root_path=root_path,
            app_state=self.app_state,
        )
        if headers is None:
            headers = {}
        headers.setdefault("user-agent", "testclient")
>       super().__init__(
            app=self.app,
            base_url=base_url,
            headers=headers,
            transport=transport,
            follow_redirects=follow_redirects,
            cookies=cookies,
        )
E       TypeError: Client.__init__() got an unexpected keyword argument 'app'

venv/lib/python3.11/site-packages/starlette/testclient.py:429: TypeError
_____________________________ test_speak_endpoint ______________________________

    def test_speak_endpoint():
        """Test /speak endpoint for TTS"""
        mock_audio_data = b"RIFFxxxxWAVEfmt \x10\x00\x00\x00\x01\x00\x01\x00\x22\x56\x00\x00\x44\xac\x00\x00\x02\x00\x10\x00dataxxxx"
        with patch("osiris.server.tts_model.synth", return_value=mock_audio_data) as mock_synth:
>           client = TestClient(app)
                     ^^^^^^^^^^^^^^^

tests/test_server.py:91: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <starlette.testclient.TestClient object at 0x7fc44efd04d0>
app = <fastapi.applications.FastAPI object at 0x7fc4738b6090>
base_url = 'http://testserver', raise_server_exceptions = True, root_path = ''
backend = 'asyncio', backend_options = None, cookies = None
headers = {'user-agent': 'testclient'}, follow_redirects = True

    def __init__(
        self,
        app: ASGIApp,
        base_url: str = "http://testserver",
        raise_server_exceptions: bool = True,
        root_path: str = "",
        backend: typing.Literal["asyncio", "trio"] = "asyncio",
        backend_options: dict[str, typing.Any] | None = None,
        cookies: httpx._types.CookieTypes | None = None,
        headers: dict[str, str] | None = None,
        follow_redirects: bool = True,
    ) -> None:
        self.async_backend = _AsyncBackend(
            backend=backend, backend_options=backend_options or {}
        )
        if _is_asgi3(app):
            asgi_app = app
        else:
            app = typing.cast(ASGI2App, app)  # type: ignore[assignment]
            asgi_app = _WrapASGI2(app)  # type: ignore[arg-type]
        self.app = asgi_app
        self.app_state: dict[str, typing.Any] = {}
        transport = _TestClientTransport(
            self.app,
            portal_factory=self._portal_factory,
            raise_server_exceptions=raise_server_exceptions,
            root_path=root_path,
            app_state=self.app_state,
        )
        if headers is None:
            headers = {}
        headers.setdefault("user-agent", "testclient")
>       super().__init__(
            app=self.app,
            base_url=base_url,
            headers=headers,
            transport=transport,
            follow_redirects=follow_redirects,
            cookies=cookies,
        )
E       TypeError: Client.__init__() got an unexpected keyword argument 'app'

venv/lib/python3.11/site-packages/starlette/testclient.py:429: TypeError
=============================== warnings summary ===============================
venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323
tests/test_db_bootstrap.py::test_db_initialization_and_operations
  /workspace/82edge_osiris/venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)

venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:373
tests/test_db_bootstrap.py::test_db_initialization_and_operations
  /workspace/82edge_osiris/venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:373: UserWarning: Valid config keys have changed in V2:
  * 'allow_population_by_field_name' has been renamed to 'validate_by_name'
    warnings.warn(message, UserWarning)

tests/test_metrics.py:65
  /workspace/82edge_osiris/tests/test_metrics.py:65: PytestUnknownMarkWarning: Unknown pytest.mark.compose - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.compose

tests/test_metrics.py:73
  /workspace/82edge_osiris/tests/test_metrics.py:73: PytestUnknownMarkWarning: Unknown pytest.mark.compose - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.compose

tests/dgm_kernel/test_meta_loop.py: 10 warnings
  /workspace/82edge_osiris/venv/lib/python3.11/site-packages/fakeredis/_connection.py:179: DeprecationWarning: Call to '__init__' function with deprecated usage of input argument/s 'retry_on_timeout'. (TimeoutError is included by default.) -- Deprecated since version 6.0.0.
    super().__init__(**kwds)

tests/test_db.py::test_feedback_append
  /workspace/82edge_osiris/tests/test_db.py:55: PydanticDeprecatedSince20: The `dict` method is deprecated; use `model_dump` instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    lls_db.feedback_tbl.add([feedback_instance.dict()])

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_adapter_hot_swap.py::TestHealthEndpoint::test_health_endpoint_with_adapter_date
FAILED tests/test_adapter_hot_swap.py::TestHealthEndpoint::test_health_endpoint_without_adapter_date
FAILED tests/test_db.py::test_feedback_append - ImportError: The lance librar...
FAILED tests/test_feedback_mechanism.py::TestFeedbackMechanism::test_load_recent_feedback_logic
FAILED tests/test_feedback_mechanism.py::TestFeedbackMechanism::test_log_propose_trade_adjustments
FAILED tests/test_feedback_mechanism.py::TestFeedbackMechanism::test_prompt_augmentation_logic
FAILED tests/test_feedback_mechanism.py::TestFeedbackMechanism::test_submit_feedback_endpoint
FAILED tests/test_feedback_versioning.py::test_harvest_feedback_py_filters_by_version
FAILED tests/test_feedback_versioning.py::test_migrate_feedback_py_script - A...
FAILED tests/test_llm_client.py::TestLLMClient::test_exceed_retries_raises - ...
FAILED tests/test_llm_client.py::TestLLMClient::test_retry_on_5xx - Attribute...
FAILED tests/test_server.py::test_generate_hermes_default_model_id - TypeErro...
FAILED tests/test_server.py::test_generate_phi3_explicit_model_id - TypeError...
FAILED tests/test_server.py::test_generate_invalid_model_id[invalid_model] - ...
FAILED tests/test_server.py::test_generate_invalid_model_id[nonsense] - TypeE...
FAILED tests/test_server.py::test_generate_invalid_model_id[bad] - TypeError:...
FAILED tests/test_server.py::test_score_proposal_with_hermes_success - TypeEr...
FAILED tests/test_server.py::test_health_endpoint_db_query_exception - TypeEr...
FAILED tests/test_server.py::test_speak_endpoint - TypeError: Client.__init__...
=========== 19 failed, 53 passed, 13 skipped, 17 warnings in 22.50s ============

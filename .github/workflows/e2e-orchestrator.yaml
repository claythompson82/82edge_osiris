name: E2E Orchestrator Smoke Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  smoke-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15 # Add a timeout for the job
    env:
      TORCH_VERSION: "2.2.2+cu121"

    services:
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-torch-${{ env.TORCH_VERSION }}

      - name: Osiris Setup
        uses: ./.github/actions/osiris-setup
        with:
          python-version: '3.11'
          install-requirements: 'true' # This will handle requirements.txt
          system-packages: 'docker-compose' # Explicitly ensure docker-compose

      - name: Install Python dependencies
        run: |
          # requirements.txt is handled by osiris-setup
          if [ -f requirements-ml.txt ]; then
            echo "Installing requirements-ml.txt..."
            python -m pip install -r requirements-ml.txt
          fi
          echo "Installing fakeredis..."
          python -m pip install fakeredis[pyaio]

      - name: Build llm-sidecar Docker image via reusable workflow
        uses: ./.github/actions/docker_build # Changed this line
        with:
          image_name: 'llm-sidecar'
          # image_tag: 'latest' # Default
          dockerfile: 'docker/Dockerfile' # Path from repo root
          context: 'docker' # Path from repo root
          push_image: false
          # build_args: '' # If HF_TOKEN is an ARG in Dockerfile, it might be picked from env if set
          # For explicit secret build args, reusable workflow might need updates or use build-args with secrets.

      - name: Run LLM Sidecar Docker Container
        run: |
          # Ensure Redis is accessible for the EventBus in the sidecar
          # The sidecar's EventBus Redis URL is hardcoded to redis://localhost:6379/0
          # The `services` block in the job already sets up Redis on localhost:6379 from the runner's perspective.
          # For Docker container to reach host's localhost, special networking might be needed,
          # or better, use service name `redis` if they are on the same Docker network.
          # Docker compose usually creates a default network.
          # If sidecar is run with docker compose, it can find 'redis' if redis is also in compose.
          # Here, Redis is a job service. The container needs to reach it at `host.docker.internal:6379`
          # or the runner's IP.
          # For simplicity, let's assume the default EventBus URL "redis://localhost:6379/0"
          # will work if the docker container uses host networking or if the runner's localhost
          # is accessible. This is often true on GitHub Actions Linux runners.
          # If not, we'd need to pass REDIS_URL as env var and use `host.docker.internal`.
          docker compose -f docker/compose.yaml up -d llm-sidecar
          echo "LLM Sidecar container started in detached mode."

      - name: Wait for llm-sidecar service
        run: |
          echo "Waiting for llm-sidecar service to be running..."
          MAX_RETRIES=18 # 18 retries * 10 seconds = 180 seconds
          RETRY_COUNT=0
          SERVICE_NAME="llm-sidecar"

          until [ $RETRY_COUNT -ge $MAX_RETRIES ]; do
            RUNNING_SERVICES=$(docker compose -f docker/compose.yaml ps --services --filter "status=running")
            if echo "${RUNNING_SERVICES}" | grep -Eq "^${SERVICE_NAME}$"; then
              echo "$SERVICE_NAME service is running."
              exit 0 # Success
            fi
            RETRY_COUNT=$((RETRY_COUNT + 1))
            FORMATTED_RUNNING_SERVICES=$(echo "${RUNNING_SERVICES}" | tr '\n' ' ' | sed 's/ $//')
            echo "Waiting for $SERVICE_NAME... Attempt $RETRY_COUNT/$MAX_RETRIES. Currently running services: [${FORMATTED_RUNNING_SERVICES:-none}]"
            sleep 10
          done

          echo "Service $SERVICE_NAME did not start within 180 seconds."
          exit 1 # Failure

      - name: Run Orchestrator Smoke Test
        run: |
          python -m osiris_policy.orchestrator "CI smoke test query for basic proposal generation"
        # Add environment variables if the orchestrator needs them
        # env:
        #   REDIS_URL: redis://localhost:6379/0 # If orchestrator needs to connect to Redis directly

      - name: Dump service logs on failure
        if: failure()
        run: |
          echo "One or more steps failed. Dumping service logs..."
          docker ps -a
          echo "---- llm-sidecar logs ----"
          docker compose -f docker/compose.yaml logs llm-sidecar > llm-sidecar-logs.txt || echo "llm-sidecar logs not available" > llm-sidecar-logs.txt
          # vram-watchdog is not started by this workflow, but include for consistency in template
          echo "---- vram-watchdog logs (if any) ----"
          docker compose -f docker/compose.yaml logs vram-watchdog > vram-watchdog-logs.txt || echo "vram-watchdog logs not available" > vram-watchdog-logs.txt

      - name: Upload service logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: service-logs-e2e-orchestrator-smoke-test
          path: |
            llm-sidecar-logs.txt
            vram-watchdog-logs.txt
          if-no-files-found: ignore
          retention-days: 7

      - name: Stop Docker Container
        if: always() # Ensure this step runs even if previous steps fail
        run: |
          echo "Stopping LLM Sidecar..."
          docker compose -f docker/compose.yaml down

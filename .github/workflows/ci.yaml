---
name: CI

"on":
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  schedule:
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      enable-obs-tests:
        description: "Run observability tests"
        required: false
        default: "false"

env:
  ENABLE_OBS_TESTS: ${{ github.event_name == 'schedule' ||
    (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
    (github.event_name == 'pull_request' &&
      contains(github.event.pull_request.labels.*.name, 'run-observability-tests')) ||
    (github.event_name == 'workflow_dispatch' && github.event.inputs.enable-obs-tests == 'true') }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4


      - name: Install yamllint
        run: |
          sudo apt-get update
          sudo apt-get install -y yamllint


      - name: Set up actionlint
        uses: rhysd/actionlint@v1
        with:
          version: latest          # keeps us on the newest release

      - name: Run actionlint
        run: actionlint

      - name: Run yamllint
        run: yamllint --strict .

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Run pre-commit
        run: pre-commit run --all-files

  obs-smoke:
    if: ${{ github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'run-observability-tests')) || (github.event_name == 'workflow_dispatch' && github.event.inputs.enable-obs-tests == 'true') }}
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Osiris Setup
        uses: ./.github/actions/osiris-setup
        with:
          install-requirements: 'false'
          system-packages: 'docker-compose curl'

      - name: Copy .env template
        run: cp .env.template .env

      - name: Start sidecar
        run: docker compose -f docker/compose.yaml up -d llm-sidecar

      - name: Check metrics endpoint
        run: |
          sleep 5
          set -o pipefail
          curl -sf http://localhost:8000/metrics | grep 'vram_usage_bytes'

      - name: Tear down
        if: always()
        run: docker compose -f docker/compose.yaml down

  build-and-test-llm-sidecar:
    needs: lint
    runs-on: ubuntu-latest
    env:
      TORCH_VERSION: "2.2.2+cu121"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-py${{ matrix.python-version }}-torch-${{ env.TORCH_VERSION }}

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: ~/.cache/buildx
          key: ${{ runner.os }}-buildx-${{ hashFiles('docker/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Osiris Setup
        uses: ./.github/actions/osiris-setup
        with:
          python-version: '3.10'  # Or whatever is appropriate for this job if it uses Python directly
          # docker-login-username: ${{ secrets.DOCKERHUB_USERNAME }}  # Optional
          # docker-login-password: ${{ secrets.DOCKERHUB_TOKEN }}   # Optional
          install-requirements: 'false'  # This job primarily deals with Docker, Python deps are in the image
          system-packages: 'jq docker-compose'  # Ensure these are available if scripts in the job use them

      - name: Build llm-sidecar Docker image via reusable workflow
        uses: ./.github/actions/docker_build  # Changed this line
        with:
          image_name: 'llm-sidecar'
          # image_tag: 'latest'  # Default is 'latest', so optional unless different tag needed
          dockerfile: 'docker/Dockerfile'
          context: 'docker'
          push_image: false
          # build_args: 'TORCH_VERSION=${{ env.TORCH_VERSION }}'  # Add if Dockerfile uses ARG TORCH_VERSION

      - name: Run llm-sidecar container
        run: |
          docker compose -f docker/compose.yaml up -d llm-sidecar
          echo "llm-sidecar container started in detached mode."

      - name: Wait for llm-sidecar service
        run: |
          echo "Waiting for llm-sidecar service to be running..."
          MAX_RETRIES=18 # 18 retries * 10 seconds = 180 seconds
          RETRY_COUNT=0
          SERVICE_NAME="llm-sidecar"

          until [ $RETRY_COUNT -ge $MAX_RETRIES ]; do
            # Get list of running services, one per line
            RUNNING_SERVICES=$(docker compose -f docker/compose.yaml ps --services --filter "status=running")

            # Check if our target service is in the list of running services
            if echo "${RUNNING_SERVICES}" | grep -Eq "^${SERVICE_NAME}$"; then
              echo "$SERVICE_NAME service is running."
              exit 0 # Success
            fi

            RETRY_COUNT=$((RETRY_COUNT + 1))
            # Show all currently running services for better diagnostics
            # Correctly escape backslash for Python string embedding YAML
            FORMATTED_RUNNING_SERVICES=$(echo "${RUNNING_SERVICES}" | tr '\n' ' ' | sed 's/ $//')
            echo "Waiting for $SERVICE_NAME... Attempt $RETRY_COUNT/$MAX_RETRIES. Currently running services: [${FORMATTED_RUNNING_SERVICES:-none}]"
            sleep 10
          done

          echo "Service $SERVICE_NAME did not start within 180 seconds."
          exit 1 # Failure

      - name: Dump service logs on failure
        if: failure()
        run: |
          echo "One or more steps failed. Dumping service logs..."
          docker ps -a
          echo "---- llm-sidecar logs ----"
          docker compose -f docker/compose.yaml logs llm-sidecar > llm-sidecar-logs.txt || echo "llm-sidecar logs not available" > llm-sidecar-logs.txt
          echo "---- vram-watchdog logs (if any) ----"
          docker compose -f docker/compose.yaml logs vram-watchdog > vram-watchdog-logs.txt || echo "vram-watchdog logs not available" > vram-watchdog-logs.txt

      - name: Upload service logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: service-logs-build-and-test-llm-sidecar
          path: |
            llm-sidecar-logs.txt
            vram-watchdog-logs.txt
          if-no-files-found: ignore
          retention-days: 7

      - name: Bring down services
        if: always() # Ensure services are brought down even if previous steps fail
        run: |
          docker compose -f docker/compose.yaml down
          echo "Services brought down."

  python-tests:
    runs-on: ubuntu-latest
    needs: build-and-test-llm-sidecar # Optional: make it run after the docker tests, or run in parallel by removing this line
    name: Python Unit Tests
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    env:
      TORCH_VERSION: "2.2.2+cu121"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Guard against sys.path.append usage
        run: ! grep -R "sys.path.append" tests | grep -v vendor

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-py${{ matrix.python-version }}-torch-${{ env.TORCH_VERSION }}

      - name: Osiris Setup
        uses: ./.github/actions/osiris-setup
        with:
          python-version: '${{ matrix.python-version }}'
          install-requirements: 'true'
          system-packages: '' # No extra system packages needed for this job by default

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-tests.txt
      - name: Run Pytest
        run: |
          pytest -n auto --cov --cov-report=xml --junitxml=pytest-results.xml tests/test_harvest.py
      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.xml
          if-no-files-found: ignore
      - name: Upload Pytest Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-python
          path: pytest-results.xml
          if-no-files-found: ignore

  observability-tests:
    if: ${{ github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'run-observability-tests')) || (github.event_name == 'workflow_dispatch' && github.event.inputs.enable-obs-tests == 'true') }}
    needs: python-tests
    runs-on: ubuntu-latest
    env:
      TORCH_VERSION: "2.2.2+cu121"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-torch-${{ env.TORCH_VERSION }}

      - name: Osiris Setup
        uses: ./.github/actions/osiris-setup
        with:
          python-version: '3.10'
          install-requirements: 'true'
          system-packages: 'docker-compose'

      - name: Run observability tests
        run: |
          pytest -n auto --junitxml=pytest-results.xml tests/test_traces.py
      - name: Upload Observability Pytest Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-obs
          path: pytest-results.xml
          if-no-files-found: ignore

      - name: Collect OTEL logs
        if: failure()
        run: |
          docker compose -f tests/docker-compose.traces.yaml logs otel-collector > otel-collector.log || true

      - name: Upload OTEL logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: otel-trace-dump
          path: otel-collector.log
          if-no-files-found: ignore
          retention-days: 7

name: CI Audio Smoke Test

on:
  pull_request:
    branches: [ main ] # Or your relevant branches
  push:
    branches: [ main ] # For running on merges to main

jobs:
  build-and-test-audio:
    if: github.event_name == 'workflow_dispatch' ||
        contains(github.event.pull_request.labels.*.name, 'run-gpu-tests')
    runs-on: [self-hosted, gpu-enabled]
    timeout-minutes: 6
    env:
      TORCH_VERSION: "2.2.2+cu121"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Osiris Setup
        uses: ./.github/actions/osiris-setup
        with:
          install-requirements: 'false' # This job builds its own Docker image
          install-poetry: 'false'
          system-packages: '' # No extra system packages seem to be needed by the workflow steps themselves

      - name: Install test-only deps
        run:  pip install -r requirements-tests.txt

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-torch-${{ env.TORCH_VERSION }}

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: ~/.cache/buildx
          key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build osiris-ci-app Docker image via reusable workflow
        uses: ./.github/actions/docker_build # Changed this line
        with:
          image_name: 'osiris-ci-app'
          # image_tag: 'latest' # Default is 'latest'
          dockerfile: './Dockerfile' # Assumes Dockerfile in the root of the repository
          context: '.' # Build context is the root of the repository
          build_args: 'CI=true' # Pass the CI=true build argument
          push_image: false

      - name: Run Docker container
        run: |
          docker run -d -p 8000:8000 --name osiris_server -e CI=true osiris-ci-app
          # The -e CI=true sets the environment variable in the running container.
          # This assumes the application uses this env var to run in headless mode.

      - name: Wait for server to be ready
        run: |
          echo "Waiting for server to start..."
          timeout 30s bash -c 'until curl -sSf http://localhost:8000/health > /dev/null; do echo -n "."; sleep 1; done'
          echo "Server is up!"
        # This uses the /health endpoint. If it doesn't exist, a simple sleep might be needed,
        # but is less reliable: sleep 20

      - name: Call /speak endpoint and check response
        id: speak_test
        run: |
          STATUS_CODE=$(curl -X POST \
            -H "Content-Type: application/json" \
            -d '{"text": "CI test"}' \
            http://localhost:8000/speak \
            --output response.wav \
            --write-out "%{http_code}")

          echo "HTTP Status Code: $STATUS_CODE"
          echo "STATUS_CODE=$STATUS_CODE" >> $GITHUB_OUTPUT

          if [ "$STATUS_CODE" -ne 200 ]; then
            echo "Error: Expected HTTP status 200, got $STATUS_CODE"
            exit 1
          fi

          # Check for WAV header (RIFF and WAVE format markers)
          # RIFF is at the beginning, WAVE is typically at offset 8
          if ! head -c 4 response.wav | grep -q "RIFF"; then
            echo "Error: Missing 'RIFF' marker in WAV header."
            hexdump -C response.wav | head -n 5 # Print first few lines of hexdump for debugging
            exit 1
          fi
          # od -A n -t x1 -j 8 -N 4 response.wav | head -1 | tr -d ' ' | grep -iq "57415645" # Hex for "WAVE"
          # A simpler check:
          if ! hexdump -C response.wav | head -n 1 | grep -q "WAVE"; then
             echo "Error: Missing 'WAVE' marker in WAV header (checked first line of hexdump)."
             hexdump -C response.wav | head -n 5
             exit 1
          fi
          echo "WAV header check passed."

      - name: Verify HTTP Status (alternative using output)
        if: steps.speak_test.outputs.STATUS_CODE != '200'
        run: |
          echo "Speak test failed with HTTP status ${{ steps.speak_test.outputs.STATUS_CODE }}"
          exit 1

      - name: Stop and remove container
        if: always() # Ensure this runs even if previous steps fail
        run: |
          echo "Stopping and removing Docker container..."
          docker stop osiris_server || echo "Failed to stop container (it might have already stopped)."
          docker rm osiris_server || echo "Failed to remove container (it might have already been removed)."
          # No need to fail the job if cleanup commands fail, as the runner will be destroyed anyway.

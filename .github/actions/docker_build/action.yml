name: 'Reusable Docker Build and Push'
description: 'A composite action to build and optionally push Docker images.'

inputs:
  image_name:
    description: 'Name of the Docker image (e.g., llm-sidecar, osiris-ci-app)'
    required: true
    type: string
  image_tag:
    description: 'Tag for the Docker image'
    required: false
    type: string
    default: 'latest'
  dockerfile:
    description: 'Path to the Dockerfile (e.g., ./Dockerfile, docker/Dockerfile)'
    required: true
    type: string
  context:
    description: 'Build context path (e.g., ., docker/)'
    required: true
    type: string
  build_args:
    description: 'Build arguments as a comma-separated list of key=value pairs (e.g., CI=true,VERSION=1.0)'
    required: false
    type: string
    default: ''
  push_image:
    description: 'Whether to push the image to the registry'
    required: false
    type: boolean
    default: false
  registry_user:
    description: 'Username for Docker registry (required if push_image is true)'
    required: false
    type: string
    default: ''
  registry_password:
    description: 'Password or token for Docker registry (required if push_image is true)'
    required: false
    type: string
    default: ''

outputs:
  image_digest:
    description: 'The digest of the built and pushed image'
    value: ${{ steps.docker_build_push.outputs.digest }}
  image_metadata:
    description: 'Metadata from the build'
    value: ${{ steps.docker_build_push.outputs.metadata }}

runs:
  using: "composite"
  steps:
    # Checkout is not strictly necessary if the action only uses other actions
    # and doesn't refer to files in the repository directly in its own run commands.
    # However, the original reusable workflow had it.
    # If context is '.', and Dockerfile is './Dockerfile', checkout is needed.
    # Let's keep it for safety, as the context input could be '.'.
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install package + test deps
      shell: bash
      run: |
        python -m pip install --upgrade pip
        python -m pip install -e .
        if [ -f requirements-ci.txt ]; then
          python -m pip install -r requirements-ci.txt
        fi

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Registry
      if: inputs.push_image == true && inputs.registry_user != '' && inputs.registry_password != ''
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.registry_user }}
        password: ${{ inputs.registry_password }}

    - name: Convert build_args string to array
      id: build_args_array
      shell: bash
      run: |
        if [ -n "${{ inputs.build_args }}" ]; then
          echo "args=$(echo \"${{ inputs.build_args }}\" | tr ',' '\n')" >> $GITHUB_OUTPUT
        else
          echo "args=" >> $GITHUB_OUTPUT
        fi

    - name: Build and Push Docker Image
      id: docker_build_push
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.dockerfile }}
        push: ${{ inputs.push_image }}
        tags: "${{ inputs.image_name }}:${{ inputs.image_tag }}"
        build-args: ${{ steps.build_args_array.outputs.args }}
        # TORCH_VERSION should be inherited from the calling workflow's environment
        # If multi-platform images are needed, pass a platforms input such as
        # 'linux/amd64,linux/arm64'
        cache-from: |
          type=gha
          type=local,src=~/.cache/buildx
        cache-to: |
          type=gha,mode=max
          type=local,dest=~/.cache/buildx,mode=max

    - name: Logout from Docker Registry
      if: always() && inputs.push_image == true && inputs.registry_user != '' && inputs.registry_password != ''
      shell: bash
      run: docker logout

    - name: Install repo (editable)
      shell: bash
      run: |
        python -m pip install --upgrade pip
        python -m pip install -e .

from __future__ import annotations

from typing import List, Dict, Optional, Any
import datetime # Changed import style
from enum import Enum

from pydantic import BaseModel, Field, ConfigDict
from pydantic.alias_generators import to_camel

from azr_planner.schemas import Instrument, Direction, TradeProposal as PlannerTradeProposal # Re-use existing types

# --- Enums specific to backtesting if any, or re-use existing ---
# For now, re-using Instrument and Direction from azr_planner.schemas

# --- Individual Trade Log ---
class DailyTrade(BaseModel):
    """Represents a single trade executed during a backtest day."""
    timestamp: datetime.datetime
    instrument: Instrument
    direction: Direction # BUY or SELL from the planner's perspective for a new/modifying trade
    size: float
    fill_price: float
    pnl: Optional[float] = Field(default=None, description="Profit and Loss for this trade if it's a closing trade.")
    # order_id: Optional[str] = None # Future extension
    # leg_id_from_proposal: Optional[str] = None # Future extension

    model_config = ConfigDict(
        frozen=True,
        populate_by_name=True,
        alias_generator=to_camel
    )

# --- Daily State Snapshots ---
class DailyPortfolioState(BaseModel):
    """Represents the state of the portfolio at the end of a backtest day (after trades)."""
    timestamp: datetime.datetime # Typically end-of-day
    cash: float
    total_equity: float
    positions: Dict[Instrument, float] # Instrument -> net size (positive for long, negative for short)
    daily_pnl: float # P&L realized on this day + MTM changes of open positions

    model_config = ConfigDict(
        frozen=True,
        populate_by_name=True,
        alias_generator=to_camel
    )

# --- Daily Result Aggregation ---
class DailyResult(BaseModel):
    """Aggregates all information for a single day of backtesting."""
    timestamp: datetime.datetime # Represents the start of the day/context timestamp
    # planning_context_summary: Optional[Dict[str, Any]] = None # Key inputs, could be large
    trade_proposal: Optional[PlannerTradeProposal] = Field(default=None, description="Proposal generated by the planner for this day.")
    trades_executed: List[DailyTrade]
    portfolio_state_after_trades: DailyPortfolioState
    planner_latency_ms: Optional[float] = Field(default=None, ge=0)
    latent_risk_at_decision: Optional[float] = Field(default=None, ge=0, le=1)
    confidence_at_decision: Optional[float] = Field(default=None, ge=0, le=1)

    model_config = ConfigDict(
        frozen=True,
        populate_by_name=True,
        alias_generator=to_camel
    )

# --- Aggregate Backtest Metrics ---
class BacktestMetrics(BaseModel):
    """Calculated performance metrics for the entire backtest period."""
    cagr: Optional[float] = None
    max_drawdown: Optional[float] = Field(default=None, ge=0) # Max drawdown is a positive value representing percentage loss
    sharpe_ratio: Optional[float] = None
    sortino_ratio: Optional[float] = None
    win_rate: Optional[float] = Field(default=None, ge=0, le=1)
    total_trades: int = Field(default=0, ge=0)
    winning_trades: int = Field(default=0, ge=0)
    losing_trades: int = Field(default=0, ge=0)
    avg_win_pnl: Optional[float] = None
    avg_loss_pnl: Optional[float] = None # Typically negative
    avg_trade_pnl: Optional[float] = None
    profit_factor: Optional[float] = Field(default=None, description="Gross profit / Gross loss. Infinite if no losses.")
    # TODO(AZR-08): Add more metrics as needed (e.g., Calmar, VaR, avg holding period)

    model_config = ConfigDict(
        frozen=True,
        populate_by_name=True,
        alias_generator=to_camel
    )

# --- Overall Backtest Report ---
class BacktestReport(BaseModel):
    """Comprehensive report of a backtest run."""
    report_generated_at: datetime.datetime = Field(default_factory=lambda: datetime.datetime.now(datetime.timezone.utc))
    backtest_run_id: Optional[str] = None # Optional ID for the run
    start_timestamp: datetime.datetime
    end_timestamp: datetime.datetime # Corrected this
    initial_cash: float
    final_equity: float
    metrics: BacktestMetrics
    equity_curve: List[float] # Daily equity values
    daily_results: List[DailyResult]
    # Series data for plotting or further analysis
    latent_risk_series: Optional[List[Optional[float]]] = Field(default_factory=list)
    confidence_series: Optional[List[Optional[float]]] = Field(default_factory=list)
    # configuration_summary: Optional[Dict[str, Any]] = None # Summary of planner config used

    model_config = ConfigDict(
        frozen=True,
        populate_by_name=True,
        alias_generator=to_camel
    )
